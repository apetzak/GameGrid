@model IEnumerable<GameGrid.Models.DBObject>

@{
    ViewBag.Title = "Game Grid";
}

<select id="page">
    <option value="Game">Game</option>
    <option value="GameDetail">GameDetail</option>
    <option value="GameRelease">GameRelease</option>
    <option value="CoverProject">CoverProject</option>
    <option value="CoverProjectCover">CoverProjectCover</option>
    <option value="GameRankings">GameRankings</option>
    <option value="HowLongToBeat">HowLongToBeat</option>
    <option value="PriceCharting">PriceCharting</option>
    <option value="VGChartz">VGChartz</option>
    <option value="VGCollect">VGCollect</option>
    <option value="Wikipedia">Wikipedia</option>
    <option value="WikipediaDetail">WikipediaDetail</option>
</select>

<p> </p>

<style>
    .header {
        white-space: nowrap;
        padding-left: 10px;
    }
</style>

@{
    object OnSearch()
    {

        return new object();
    }
}

<div class="header">
    <button onclick="@OnSearch()">Search</button>
</div>

<p> </p>

<style>
    .grid {
        white-space: nowrap;
        margin-left: 0;
        padding-left: 0;
    }
</style>

<div class="grid">

    @{
        Type type = null;
        foreach (var item in Model)
        {
            type = item.GetType();
            break;
        }

        if (type != null)
        {
            foreach (System.Reflection.PropertyInfo pi in type.GetProperties())
            {
                <input size=@(pi.Name.Length - 1)>
            }
        }
    }

</div>

<table class="table">

    <tr>
        @{
            if (type != null)
            {
                foreach (System.Reflection.PropertyInfo pi in type.GetProperties())
                {
                    <th size="@pi.Name.Length">@pi.Name</th>
                }
            }
        }
    </tr>

    @foreach (var item in Model)
    {
        <tr>

            @{
                if (type != null)
                {
                    foreach (System.Reflection.PropertyInfo pi in type.GetProperties())
                    {
                        object val = pi.GetValue(item);

                        if (val == null)
                        {
                            <td></td>
                            continue;
                        }

                        string value = val.ToString();
                        if (value.Length > 50)
                        {
                            value = value.Remove(50);
                        }

                        <td nowrap>@value</td>
                    }
                }
            }

            <td>
                @Html.ActionLink("Details", "Details", new { name = type.GetProperty("Name").GetValue(item) }) |
                @Html.ActionLink("Edit", "Edit", new { name = type.GetProperty("Name").GetValue(item) })
            </td>
        </tr>
    }

</table>
